generator client {
  provider = "prisma-client-js"
    previewFeatures = ["strictUndefinedChecks"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRole {
  ADMIN
  DANISMAN
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  image         String?
  password      String?
  role          UserRole @default(DANISMAN)
  accounts      Account[]
  Ilanlar Ilan[]
  telefon     String @default("0")
  definition String  @default("Tan覺t覺m Yaz覺n覺z")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model danisman {
  id            String          @id @default(cuid())


}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
model Slogan {
  id        String   @id @default(uuid())
  sloganName       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Iletisim {
  id        String   @id @default(uuid())
  sirketAd       String
  sirketAdres       String
  sirkettelefon       Decimal
  kisiselTelefon       Decimal
  destekemail       String
  facebookLink       String?
  instaLink       String?
  twitterLink       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model photoGaleryAdminImage{
  id String @id @default(uuid())
  photoGaleryAdminId String
  photoGaleryAdmin photoGaleryAdmin @relation(fields: [photoGaleryAdminId],references: [id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
model photoGaleryAdmin {
  id        String   @id @default(uuid())
  photoGaleryAdminImage photoGaleryAdminImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model IlanTipi {  
  id        String   @id @default(uuid())
  ilantipiismi       String @unique
  order   Int
  IlanTuru IlanTuru[] 
  Ilan Ilan[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model IlanTuru {  
  id        String   @id @default(uuid())
  IlanTuruIsmi       String 
  Ilan Ilan[]
  IlanTipiId String
  IlanTipi IlanTipi @relation(fields: [IlanTipiId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model Image{
  id String @id @default(uuid())
  productId String
  product Ilan @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}



model Ilan{
  id String @id @default(uuid())
  IlanTipiId String
  IlanTipi IlanTipi @relation(fields: [IlanTipiId],references: [id])
  IlanTuruId String
  IlanTuru IlanTuru @relation(fields: [IlanTuruId],references: [id])
  userId String
  user User @relation(fields: [userId],references: [id])
  order Int
  json  Json?
  name String
  price Decimal 
  anaVitrin Boolean   @default(false)
  FirsatVitrini  Boolean   @default(false)
  AcilVitrini  Boolean   @default(false)
  satildi  Boolean @default(false)
  Kiralandi   Boolean @default(false)
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([IlanTipiId])
    
}

